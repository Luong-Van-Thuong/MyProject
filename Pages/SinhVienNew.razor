@page "/sinhvien"
@using Blazored.Toast.Services
@using ClosedXML.Excel;
@using MyProject.Browser
@using MyProject.Data;
@using Microsoft.EntityFrameworkCore; 
@inject IToastService ToastService
@inject IJSRuntime JSRuntime;
@using MyProject.Pages;
@inject AppDbContext DbContext
@using Blazored.Toast;

<PageTitle>Quản lý Sinh Viên</PageTitle>

<div class="container mt-4 ">
    <h2 class="mb-4">Quản lý Sinh Viên</h2>
    <div class="card p-3 mb-4">
        <div class="row mb-3">
            <div class="col-md-6">
                <label class="form-label">Năm học</label>
                <select class="form-select" @bind="nam_hoc">
                    <option value="">-- Chọn năm học --</option>
                    <option value="1">1</option>
                    <option value="2">2</option>
                    <option value="3">3</option>
                    <option value="4">4</option>
                    <option value="">Chưa nhập học</option>
                </select>
            </div>
            <div class="col-md-6">
                <label class="form-label">Chuyên ngành</label>
                <select class="form-select" @bind="chuyen_nganh">
                    <option value="">-- Chọn chuyên ngành --</option>
                    <option value="CNTT">CNTT</option>
                    <option value="kinh_te">Kinh tế</option>
                    <option value="ngoai_ngu">Ngoại ngữ</option>
                </select>
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-6">
                <label class="form-label">Tên</label>
                <input type="text" class="form-control" @bind="ten" />
            </div>
            <div class="col-md-6">
                <label class="form-label">Quê quán</label>
                <input type="text" class="form-control" @bind="que_quan" />
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-6">
                <label class="form-label">Ngày sinh</label>
                <input type="date" class="form-control" @bind="ngay_sinh" />
            </div>
        </div>

        <div class="d-flex gap-2">
            <button class="btn btn-secondary" @onclick="HandleButtonClick">📂 Import Excel</button>
            <InputFile id="fileInput" OnChange="@OnFileSelected" style="display: none;" />
            <button class="btn btn-success" @onclick="Create">➕ Thêm mới</button>
            <button class="btn btn-warning" @onclick="Update">✏️ Cập nhật</button>
            <button class="btn btn-danger" @onclick="Delete">🗑 Xóa</button>
            <button class="btn btn-danger" @onclick="DrawChart">Biểu đồ tuổi trung bình</button>
            <button class="btn btn-danger" @onclick="GetAgeStatistics">Thống kê tuổi</button>
        </div>
    </div>

    <div class="card p-3">
        <h5>Dữ liệu sinh viên</h5>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Họ và tên</th>
                    <th>Năm học</th>
                    <th>Chuyên ngành</th>
                    <th>Ngày sinh</th>
                    <th>Quê quán</th>
                </tr>
            </thead>
            <tbody>
                @if (sinhVienList == null || sinhVienList.Count == 0)
                {
                    <tr>
                        <td colspan="6" class="text-center">Chưa có dữ liệu</td>
                    </tr>
                }
                else
                {
                    @foreach (var sv in sinhVienList)
                    {
                        <tr @onclick="() => SelectStudent(sv)">
                            <td>@sv.ten</td>
                            <td>@sv.nam_hoc</td>
                            <td>@sv.chuyen_nganh</td>
                            <td>@sv.que_quan</td>
                            <td>@sv.ngay_sinh</td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
    <ErrorNewCompont @ref="errorToastComponent" />
    @if (isButtonDisabled)
    {
        <BarChart Data="@thongKeTheoNamHoc" />
    }    
    <div>
        @if (KetQuaThongKe != null)
        {
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Năm học</th>                        
                        <th>Tuổi</th>
                        <th>Số lượng</th>                        
                    </tr>
                </thead>
                <tbody>
                    @if (KetQuaThongKe == null || KetQuaThongKe.Count == 0)
                    {
                        <tr>
                            <td colspan="6" class="text-center">Chưa có dữ liệu</td>
                        </tr>
                    }
                    else
                    {
                        @foreach (var item in KetQuaThongKe)
                        {
                            <tr>
                                <td>@item.NamHoc</td>
                                <td>@item.Tuoi</td>
                                <td>@item.SoLuong</td>
                            </tr>
                        }
                    }
                </tbody>
            </table>            
        }
    </div>

</div>


@code {

    // Chuỗi kết nối SQL Server đã được loại bỏ và thay thế bằng DbContext
    private ErrorNewCompont? errorToastComponent;

    // Biến lưu input
    private string? nam_hoc { get; set; }
    private string? chuyen_nganh { get; set; }
    private string? ten { get; set; }
    private string? que_quan { get; set; }
    private DateTime ngay_sinh { get; set; } = DateTime.Now;
    private bool showFilePicker = false;
    // Danh sách sinh viên
    private List<SinhVienData> sinhVienList = new();
    private SinhVienData? selectedStudent;
    private List<NamHocThongKe> thongKeTheoNamHoc = new();
    public List<ThongKeTuoi> KetQuaThongKe { get; set; }
    private List<string> errorMessage = new();
    private bool _isFirstRender = true;
    string colerError = "error-toast";

    bool isButtonDisabled = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_isFirstRender)
        {
            _isFirstRender = false;
            await GetAllData();
        }
    }


    private async Task Create()
    {
        try
        {
            if(string.IsNullOrEmpty(ten))
            {
                errorToastComponent.ShowMessage("Tên không được để trống!", false);
                return;
            }
            SinhVienData sv = new();
            sv.oid = Guid.NewGuid().ToString();            
            sv.nam_hoc = nam_hoc;
            sv.chuyen_nganh = chuyen_nganh;
            sv.ten = ten;
            sv.que_quan = que_quan;
            sv.ngay_sinh = ngay_sinh.ToString("yyyy-MM-dd");
            await DbContext.SinhViens.AddAsync(sv);
            await DbContext.SaveChangesAsync();            
            errorToastComponent.ShowMessage("Đã thêm sinh viên mới!", true);
            sinhVienList.Add(sv);
            await UpdateExcelFileAsync();            
        }
        catch (Exception ex)
        {            
            errorToastComponent.ShowMessage($"Lỗi khi thêm sinh viên: {ex.Message}", false);
        }
        finally
        {
            await GetAllData();
        }
    }

    private async Task Update()
    {
        try
        {
            if (selectedStudent != null)
            {
                selectedStudent.nam_hoc = nam_hoc;
                selectedStudent.chuyen_nganh = chuyen_nganh;
                selectedStudent.ten = ten;
                selectedStudent.que_quan = que_quan;
                selectedStudent.ngay_sinh = ngay_sinh.ToString("yyyy-MM-dd");

                DbContext.SinhViens.Update(selectedStudent);
                await DbContext.SaveChangesAsync();
                ToastService.ShowSuccess("Đã cập nhật dữ liệu thành công!");

                for(int i = 0; i < sinhVienList.Count; i++)
                {
                    if (sinhVienList[i].oid == selectedStudent.oid)
                    {
                        sinhVienList[i] = selectedStudent;
                    }
                }                

                await UpdateExcelFileAsync();                
                errorToastComponent.ShowMessage("Đã cập nhật sinh viên mới!", true);
            }

        }
        catch (Exception ex)
        {
            errorToastComponent.ShowMessage($"Lỗi khi cập nhật sinh viên: {ex.Message}", false);
        }
        finally
        {
            await GetAllData();
        }
    }

    private async Task Delete()
    {
        try
        {
            if (selectedStudent != null)
            {
                DbContext.SinhViens.Remove(selectedStudent);
                var sinhXoa = sinhVienList.Where(x => x.oid == selectedStudent.oid).FirstOrDefault();
                sinhVienList.Remove(sinhXoa);
                await DbContext.SaveChangesAsync();                
                errorToastComponent.ShowMessage("Đã xóa sinh viên thành công!", true);
                await UpdateExcelFileAsync();
            }
        }
        catch (Exception ex)
        {            
            errorToastComponent.ShowMessage($"Lỗi khi xóa sinh viên: {ex.Message}", false);
        }
        finally
        {
            await GetAllData();
        }
    }

    private void HandleButtonClick()
    {
        // Gọi hàm JavaScript để kích hoạt InputFile
        JSRuntime.InvokeVoidAsync("triggerFilePicker");
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            List<SinhVienData> sinhVienListAdd = new();
            try
            {
                using var memoryStream = new MemoryStream();
                await file.OpenReadStream().CopyToAsync(memoryStream);
                memoryStream.Position = 0;

                using var workbook = new XLWorkbook(memoryStream);
                var worksheet = workbook.Worksheet(1);
                var rows = worksheet.RowsUsed().Skip(1); // Bỏ qua hàng tiêu đề

                foreach (var row in rows)
                {
                    var sv = new SinhVienData
                    {
                        oid = Guid.NewGuid().ToString(),
                        nam_hoc = row.Cell(1).GetString(),
                        chuyen_nganh = row.Cell(2).GetString(),
                        ten = row.Cell(3).GetString(),
                        ngay_sinh = row.Cell(4).GetString(),
                        que_quan = row.Cell(5).GetString()
                    };
                    sinhVienListAdd.Add(sv);
                }

                await DbContext.SinhViens.AddRangeAsync(sinhVienListAdd);
                await DbContext.SaveChangesAsync();
                sinhVienList.AddRange(sinhVienListAdd);                                
                errorToastComponent.ShowMessage("Đã thêm sinh viên mới vào Execl!", true);
                await UpdateExcelFileAsync();
            }
            catch (Exception ex)
            {
                errorToastComponent.ShowMessage($"Lỗi khi thêm sinh viên và Execl: {ex.Message}", false);

            }
            finally
            {
                await GetAllData();
            }
        }
    }

    // Lấy toàn bộ dữ liệu từ database bằng Entity Framework Core
    private async Task GetAllData()
    {
        try
        {
            sinhVienList = await DbContext.SinhViens.ToListAsync();            
        }
        catch (Exception ex)
        {
            errorToastComponent.ShowMessage($"Lỗi khi GetAllData sinh viên: {ex.Message}", false);
        }
        StateHasChanged();
    }

    // Gán data cho các controll và và lấy được giá trị của hàng đã chọn
    private void SelectStudent(SinhVienData student)
    {
        selectedStudent = student;
        nam_hoc = selectedStudent.nam_hoc;
        chuyen_nganh = selectedStudent.chuyen_nganh;
        ten = selectedStudent.ten;
        que_quan = selectedStudent.que_quan;
        ngay_sinh = selectedStudent.ngay_sinh != null ? DateTime.Parse(selectedStudent.ngay_sinh) : DateTime.Now;

    }


    // Update lại file Excel với dữ liệu mới
    private async Task UpdateExcelFileAsync()
    {
        var folderPath = AppDomain.CurrentDomain.BaseDirectory;
        var filePath = Path.Combine(folderPath, "test.xlsx");
        try
        {
            using var workbook = new XLWorkbook();
            var worksheet = workbook.Worksheets.Add("sheet1");

            // Tạo header
            worksheet.Cell(1, 1).Value = "Năm học";
            worksheet.Cell(1, 2).Value = "Chuyên ngành";
            worksheet.Cell(1, 3).Value = "Tên";
            worksheet.Cell(1, 4).Value = "Ngày sinh";
            worksheet.Cell(1, 5).Value = "Quê quán";
            worksheet.Cell(1, 6).Value = "OID";

            int row = 2; // bắt đầu ghi từ dòng 2
            foreach (var sv in sinhVienList)
            {
                var namhoc = sv.nam_hoc;
                worksheet.Cell(row, 1).SetValue(sv.nam_hoc ?? string.Empty);
                worksheet.Cell(row, 2).SetValue(sv.chuyen_nganh ?? string.Empty);
                worksheet.Cell(row, 3).SetValue(sv.ten ?? string.Empty);
                worksheet.Cell(row, 4).SetValue(sv.ngay_sinh ?? string.Empty);
                worksheet.Cell(row, 5).SetValue(sv.que_quan ?? string.Empty);
                worksheet.Cell(row, 6).SetValue(sv.oid ?? string.Empty);
                row++;
            }

            // Ghi đè lại file Excel
            workbook.SaveAs(filePath);
            await Task.CompletedTask;

        }
        catch (Exception ex)
        {
            errorToastComponent.ShowMessage($"Lỗi khi thêm sinh viên vào Execl: {ex.Message}", false);
        }
    }

    private async Task DrawChart()
    {
        isButtonDisabled = true;
        thongKeTheoNamHoc = sinhVienList
         .GroupBy(sv => sv.nam_hoc)
         .Select(g => new NamHocThongKe
         {
             NamHoc = g.Key,
             TuoiTrungBinh = g.Average(sv => DateTime.Now.Year - DateTime.Parse(sv.ngay_sinh).Year)
         })
         .OrderBy(t => int.Parse(t.NamHoc))
         .ToList();
        var data = thongKeTheoNamHoc;
    }

    public async Task GetAgeStatistics()
    {
        var ketQua = sinhVienList
            .Where(sv => DateTime.TryParse(sv.ngay_sinh, out _))
            .Select(sv => new
            {
                NamHoc = sv.nam_hoc,
                Tuoi = DateTime.Now.Year - DateTime.Parse(sv.ngay_sinh).Year -
                       (DateTime.Parse(sv.ngay_sinh).Date > DateTime.Now.AddYears(-(DateTime.Now.Year - DateTime.Parse(sv.ngay_sinh).Year)) ? 1 : 0)
            })
            .GroupBy(sv => new { sv.NamHoc, sv.Tuoi })
            .Select(g => new ThongKeTuoi // Sửa ở đây
            {
                NamHoc = g.Key.NamHoc,
                Tuoi = g.Key.Tuoi,
                SoLuong = g.Count()
            })
            .OrderBy(r => r.NamHoc)
            .ThenBy(r => r.Tuoi)
            .ToList();
            
        KetQuaThongKe = ketQua;
    }
}